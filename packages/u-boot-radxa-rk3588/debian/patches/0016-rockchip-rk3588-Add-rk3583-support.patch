From 377e86815b9f88883bd08a69a1ea3d53143b6dee Mon Sep 17 00:00:00 2001
From: Joseph Chen <chenjh@rock-chips.com>
Date: Thu, 31 Aug 2023 03:57:44 +0000
Subject: [PATCH 2/2] rockchip: rk3588: Add rk3583 support

Signed-off-by: Joseph Chen <chenjh@rock-chips.com>
Change-Id: I6a6640468236411218493432c4aadaf371beb811
---
 arch/arm/mach-rockchip/rk3588/rk3588.c | 80 ++++++++++++++++++++++++--
 1 file changed, 74 insertions(+), 6 deletions(-)

diff --git a/arch/arm/mach-rockchip/rk3588/rk3588.c b/arch/arm/mach-rockchip/rk3588/rk3588.c
index 501bb9c2f8c..cbebf51053e 100644
--- a/arch/arm/mach-rockchip/rk3588/rk3588.c
+++ b/arch/arm/mach-rockchip/rk3588/rk3588.c
@@ -5,6 +5,7 @@
  */
 #include <common.h>
 #include <dm.h>
+#include <fdt_support.h>
 #include <misc.h>
 #include <mmc.h>
 #include <spl.h>
@@ -1022,12 +1023,24 @@ int arch_cpu_init(void)
 
 #define BAD_CPU(mask, n)	((mask) & (1 << (n)))
 #define BAD_RKVENC(mask, n)	((mask) & (1 << (n)))
+#define BAD_RKVDEC(mask, n)	((mask) & (1 << (n)))
 
 static void fdt_rm_path(void *blob, const char *path)
 {
 	fdt_del_node(blob, fdt_path_offset(blob, path));
 }
 
+static void fdt_rename_path(void *blob, const char *path, const char *name)
+{
+	int noffset;
+
+	noffset = fdt_path_offset(blob, path);
+	if (noffset < 0)
+		return;
+
+	fdt_set_name(blob, noffset, name);
+}
+
 static void fdt_rm_cooling_map(const void *blob, u8 cpu_mask)
 {
 	int map1, map2;
@@ -1216,6 +1229,8 @@ static void rk3582_fdt_rm_rkvenc01(void *blob, u8 mask)
 	 *
 	 * 1. remove bad.
 	 * 2. if both of rkvenc0 and rkvenc1 are normal, remove rkvenc1 by default.
+	 * 3. disable '*-ccu' node
+	 * 4. rename '*-core@' node
 	 */
 	if (!BAD_RKVENC(mask, 0) && !BAD_RKVENC(mask, 1)) {
 		/* rkvenc1 */
@@ -1235,6 +1250,50 @@ static void rk3582_fdt_rm_rkvenc01(void *blob, u8 mask)
 			debug("rm: rkvenv1\n");
 		}
 	}
+
+	do_fixup_by_path((void *)blob, "/rkvenc-ccu",
+			 "status", "disabled", sizeof("disabled"), 0);
+
+	/* rename node name if the node exist, actually only one exist  */
+	fdt_rename_path(blob, "/rkvenc-core@fdbd0000", "rkvenc@fdbd0000");
+	fdt_rename_path(blob, "/rkvenc-core@fdbe0000", "rkvenc@fdbe0000");
+}
+
+static void rk3583_fdt_rm_rkvdec01(void *blob, u8 mask)
+{
+	/*
+	 * policy:
+	 *
+	 * 1. remove bad.
+	 * 2. if both of rkvdec0 and rkvdec1 are normal, remove rkvdec1 by default.
+	 * 3. disable '*-ccu' node
+	 * 4. rename '*-core@' node
+	 */
+	if (!BAD_RKVDEC(mask, 0) && !BAD_RKVDEC(mask, 1)) {
+		/* rkvdec1 */
+		fdt_rm_path(blob, "/rkvdec-core@fdc48000");
+		fdt_rm_path(blob, "/iommu@fdc48700");
+		debug("rm: rkvdec1\n");
+	} else {
+		if (BAD_RKVDEC(mask, 0)) {
+			fdt_rm_path(blob, "/rkvdec-core@fdc38000");
+			fdt_rm_path(blob, "/iommu@fdc38700");
+			debug("rm: rkvdec0\n");
+
+		}
+		if (BAD_RKVDEC(mask, 1)) {
+			fdt_rm_path(blob, "/rkvdec-core@fdc48000");
+			fdt_rm_path(blob, "/iommu@fdc48700");
+			debug("rm: rkvdec1\n");
+		}
+	}
+
+	do_fixup_by_path((void *)blob, "/rkvdec-ccu@fdc30000",
+			 "status", "disabled", sizeof("disabled"), 0);
+
+	/* rename node name if the node exist, actually only one exist  */
+	fdt_rename_path(blob, "/rkvdec-core@fdc38000", "rkvdec@fdc38000");
+	fdt_rename_path(blob, "/rkvdec-core@fdc48000", "rkvdec@fdc48000");
 }
 
 #define CHIP_ID_OFF	2
@@ -1246,6 +1305,7 @@ static int fdt_fixup_modules(void *blob)
 	u8 ip_state[3];
 	u8 chip_id[2];
 	u8 rkvenc_mask;
+	u8 rkvdec_mask;
 	u8 cpu_mask;
 	int ret;
 
@@ -1264,8 +1324,9 @@ static int fdt_fixup_modules(void *blob)
 
 	debug("# chip: rk%02x%02x\n", chip_id[0], chip_id[1]);
 
-	/* only rk3582 goes further */
-	if (!(chip_id[0] == 0x35 && chip_id[1] == 0x82))
+	/* only rk3582/rk3583 goes further */
+	if (!(chip_id[0] == 0x35 && chip_id[1] == 0x82) &&
+	    !(chip_id[0] == 0x35 && chip_id[1] == 0x83))
 		return 0;
 
 	ret = misc_read(dev, IP_STATE_OFF, &ip_state, sizeof(ip_state));
@@ -1278,14 +1339,14 @@ static int fdt_fixup_modules(void *blob)
 	cpu_mask = ip_state[0];
 	/* ip_state[2]: bit0,2 */
 	rkvenc_mask = (ip_state[2] & 0x1) | ((ip_state[2] & 0x4) >> 1);
+	/* ip_state[1]: bit6,7 */
+	rkvdec_mask = (ip_state[1] & 0xc0) >> 6;
 #if 0
 	/* ip_state[1]: bit1~4 */
 	gpu_mask = (ip_state[1] & 0x1e) >> 1;
-	/* ip_state[1]: bit6,7 */
-	rkvdec_mask = (ip_state[1] & 0xc0) >> 6;
 #endif
-	debug("hwmask: 0x%02x, 0x%02x, 0x%02x\n", ip_state[0], ip_state[1], ip_state[2]);
-	debug("swmask: 0x%02x, 0x%02x\n", cpu_mask, rkvenc_mask);
+	debug("hw-mask: 0x%02x, 0x%02x, 0x%02x\n", ip_state[0], ip_state[1], ip_state[2]);
+	debug("sw-mask: 0x%02x, 0x%02x, 0x%02x\n", cpu_mask, rkvenc_mask, rkvdec_mask);
 
 	/*
 	 *		FIXUP WARNING!
@@ -1306,6 +1367,13 @@ static int fdt_fixup_modules(void *blob)
 		rk3582_fdt_rm_rkvdec01(blob);
 		rk3582_fdt_rm_rkvenc01(blob, rkvenc_mask);
 		rk3582_fdt_rm_cpus(blob, cpu_mask);
+	} else if (chip_id[0] == 0x35 && chip_id[1] == 0x83) {
+		/*
+		 * RK3583 Policy: some rules are the same as rk3582.
+		 */
+		rk3583_fdt_rm_rkvdec01(blob, rkvdec_mask);
+		rk3582_fdt_rm_rkvenc01(blob, rkvenc_mask);
+		rk3582_fdt_rm_cpus(blob, cpu_mask);
 	}
 
 	return 0;
-- 
2.25.1

