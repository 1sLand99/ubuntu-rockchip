BOARD_NAME="Turing RK1"
BOARD_MAKER="Turing Machines"
UBOOT_PACKAGE="u-boot-turing-rk3588"
UBOOT_RULES_TARGET="turing-rk1-rk3588"

function config_image_hook__turing-rk1() {
    # Create udev audio rules
    if [ "${RELEASE}" == "jammy" ]; then
        echo 'SUBSYSTEM=="sound", ENV{ID_PATH}=="platform-hdmi0-sound", ENV{SOUND_DESCRIPTION}="HDMI0 Audio"' > ${chroot_dir}/etc/udev/rules.d/90-naming-audios.rules
        echo 'SUBSYSTEM=="sound", ENV{ID_PATH}=="platform-dp0-sound", ENV{SOUND_DESCRIPTION}="DP0 Audio"' >> ${chroot_dir}/etc/udev/rules.d/90-naming-audios.rules
    fi

    return 0
}

function build_image_hook__turing-rk1() {
    # The RK1 uses UART9 for console output
    if [[ "${KERNEL_TARGET}" == "mainline" ]]; then
        sed -i 's/console=ttyS2,1500000/console=ttyS0,115200/g' ${mount_point}/system-boot/ubuntuEnv.txt
    else
        sed -i 's/console=ttyS2,1500000/console=ttyS9,115200/g' ${mount_point}/writable/etc/kernel/cmdline

        # Mount the temporary API filesystems
        mkdir -p ${mount_point}/writable/{proc,sys,run,dev,dev/pts}
        mount -t proc /proc ${mount_point}/writable/proc
        mount -o bind /dev ${mount_point}/writable/dev
        mount -o bind /dev/pts ${mount_point}/writable/dev/pts

        # Populate the boot firmware path
        chroot ${mount_point}/writable /bin/bash -c "u-boot-update"

        # Umount temporary API filesystems
        umount -lf ${mount_point}/writable/dev/pts 2> /dev/null || true
        umount -lf ${mount_point}/writable/* 2> /dev/null || true
    fi

    # Install panfork
    chroot ${chroot_dir} add-apt-repository -y ppa:jjriek/panfork-mesa
    chroot ${chroot_dir} apt-get update
    chroot ${chroot_dir} apt-get -y install mali-g610-firmware
    chroot ${chroot_dir} apt-get -y dist-upgrade

    return 0
}
