From 9a1ae923ebacac888fb7bf07f3adff5f3a61168b Mon Sep 17 00:00:00 2001
From: Joshua Riek <jjriek@verizon.net>
Date: Sun, 2 Apr 2023 18:48:26 -0400
Subject: [PATCH] scripts: package: debianize kernel package

---
 Makefile                 |  21 ++---
 scripts/package/builddeb | 180 ++++++---------------------------------
 scripts/package/mkdebian |  26 +++---
 3 files changed, 45 insertions(+), 182 deletions(-)

diff --git a/Makefile b/Makefile
index 6bbc15bea0..e9109e20f2 100644
--- a/Makefile
+++ b/Makefile
@@ -1293,8 +1293,7 @@ targets := vmlinux
 $(sort $(vmlinux-deps) $(subdir-modorder)): descend ;
 
 filechk_kernel.release = \
-	echo "$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion \
-		$(srctree) $(BRANCH) $(KMI_GENERATION))"
+	echo "$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion $(srctree))"
 
 # Store (new) KERNELRELEASE string in include/config/kernel.release
 include/config/kernel.release: FORCE
@@ -1364,17 +1363,12 @@ endif
 # needs to be updated, so this check is forced on all builds
 
 uts_len := 64
-ifneq (,$(BUILD_NUMBER))
-	UTS_RELEASE=$(KERNELRELEASE)-ab$(BUILD_NUMBER)
-else
-	UTS_RELEASE=$(KERNELRELEASE)
-endif
 define filechk_utsrelease.h
-	if [ `echo -n "$(UTS_RELEASE)" | wc -c ` -gt $(uts_len) ]; then \
-		echo '"$(UTS_RELEASE)" exceeds $(uts_len) characters' >&2;    \
-		exit 1;                                                       \
-	fi;                                                             \
-	echo \#define UTS_RELEASE \"$(UTS_RELEASE)\"
+	if [ `echo -n "$(KERNELRELEASE)" | wc -c ` -gt $(uts_len) ]; then \
+		echo '"$(KERNELRELEASE)" exceeds $(uts_len) characters' >&2;    \
+		exit 1;                                                         \
+	fi;                                                               \
+	echo \#define UTS_RELEASE \"$(KERNELRELEASE)\"
 endef
 
 define filechk_version.h
@@ -2024,8 +2018,7 @@ checkstack:
 	$(PERL) $(srctree)/scripts/checkstack.pl $(CHECKSTACK_ARCH)
 
 kernelrelease:
-	@echo "$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion \
-		$(srctree) $(BRANCH) $(KMI_GENERATION))"
+	echo "$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion $(srctree))"
 
 kernelversion:
 	@echo $(KERNELVERSION)
diff --git a/scripts/package/builddeb b/scripts/package/builddeb
index 7c7cde9304..e521c6121d 100755
--- a/scripts/package/builddeb
+++ b/scripts/package/builddeb
@@ -42,99 +42,19 @@ create_package() {
 	chmod -R a+rX "$pdir"
 
 	# Create preinstall and post install script to remove dtb
-	if [ "$3" = "dtb" ]; then
+	if [ "$pname" = "$dtb_packagename" ]; then
 
 	cat >> $pdir/DEBIAN/preinst <<EOT
-rm -rf /boot/dtb-$version; rm -rf /boot/dtb
+rm -rf /boot/firmware/*.dtb
+rm -rf /boot/firmware/overlays
 exit 0
 EOT
-
-	cat >> $pdir/DEBIAN/postinst <<EOT
-cd /boot
-ln -sfT dtb-$version dtb 2> /dev/null || mv dtb-$version dtb
-exit 0
-EOT
-
-	chmod 775 $pdir/DEBIAN/preinst ; chmod 775 $pdir/DEBIAN/postinst
-	fi
-
-	# Create postinst prerm scripts for headers
-	if [ "$3" = "headers" ]; then
-
-cat >> $pdir/DEBIAN/postinst << EOT
-cd /usr/src/linux-headers-$version
-echo "Compiling headers - please wait ..."
-find -type f -exec touch {} +
-yes "" | make oldconfig >/dev/null
-make -j\$(grep -c 'processor' /proc/cpuinfo) -s scripts >/dev/null
-make -j\$(grep -c 'processor' /proc/cpuinfo) -s M=scripts/mod/ >/dev/null
-exit 0
-EOT
-
-cat >> $pdir/DEBIAN/prerm << EOT
-cd /usr/src/linux-headers-$version
-rm -rf scripts .config.old
-EOT
-
-	chmod 775 $pdir/DEBIAN/postinst ; chmod 775 $pdir/DEBIAN/prerm
+		chmod 775 $pdir/DEBIAN/preinst
 	fi
 
 	# Create the package
 	dpkg-gencontrol -p$pname -P"$pdir"
-	dpkg-deb ${KDEB_COMPRESS:+-Z$KDEB_COMPRESS} --build "$pdir" ..
-}
-
-deploy_kernel_headers () {
-	pdir=$1
-
-	rm -rf $pdir
-
-	(
-		cd $srctree
-		find . arch/$SRCARCH -maxdepth 1 -name Makefile\*
-		find include scripts -type f -o -type l
-		find arch/$SRCARCH -name module.lds -o -name Kbuild.platforms -o -name Platform
-		find $(find arch/$SRCARCH -name include -o -name scripts -type d) -type f
-	) > debian/hdrsrcfiles
-
-	{
-		if is_enabled CONFIG_STACK_VALIDATION; then
-			echo tools/objtool/objtool
-		fi
-
-		find arch/$SRCARCH/include Module.symvers include scripts -type f
-
-		if is_enabled CONFIG_GCC_PLUGINS; then
-			find scripts/gcc-plugins -name \*.so
-		fi
-	} > debian/hdrobjfiles
-
-	destdir=$pdir/usr/src/linux-headers-$version
-	mkdir -p $destdir
-	tar -c -f - -C $srctree -T debian/hdrsrcfiles | tar -xf - -C $destdir
-	tar -c -f - -T debian/hdrobjfiles | tar -xf - -C $destdir
-	rm -f debian/hdrsrcfiles debian/hdrobjfiles
-
-	# copy .config manually to be where it's expected to be
-	cp $KCONFIG_CONFIG $destdir/.config
-
-	mkdir -p $pdir/lib/modules/$version/
-	ln -s /usr/src/linux-headers-$version $pdir/lib/modules/$version/build
-}
-
-deploy_libc_headers () {
-	pdir=$1
-
-	rm -rf $pdir
-
-	$MAKE -f $srctree/Makefile headers
-	$MAKE -f $srctree/Makefile headers_install INSTALL_HDR_PATH=$pdir/usr
-
-	# move asm headers to /usr/include/<libc-machine>/asm to match the structure
-	# used by Debian-based distros (to support multi-arch)
-	host_arch=$(dpkg-architecture -a$(cat debian/arch) -qDEB_HOST_MULTIARCH)
-	mkdir $pdir/usr/include/$host_arch
-	mv $pdir/usr/include/asm $pdir/usr/include/$host_arch/
+	dpkg --build "$pdir" ..
 }
 
 version=$KERNELRELEASE
@@ -143,10 +63,10 @@ kernel_headers_dir="$objtree/debian/hdrtmp"
 libc_headers_dir="$objtree/debian/headertmp"
 dbg_dir="$objtree/debian/dbgtmp"
 dtb_dir="$objtree/debian/dtbtmp"
-packagename=linux-image-"$BRANCH$LOCALVERSION"
-kernel_headers_packagename=linux-headers-"$BRANCH$LOCALVERSION"
-dtb_packagename=linux-dtb-"$BRANCH$LOCALVERSION"
-libc_headers_packagename=linux-libc-dev-"$BRANCH$LOCALVERSION"
+packagename=linux-image-$version
+kernel_headers_packagename=linux-headers-$version
+dtb_packagename=linux-dtb-$version
+libc_headers_packagename=linux-libc-dev
 dbg_packagename=$packagename-dbg
 
 if [ "$ARCH" = "um" ] ; then
@@ -157,15 +77,6 @@ fi
 # XXX: have each arch Makefile export a variable of the canonical image install
 # path instead
 case $ARCH in
-aarch64|arm64)
-	image_name=Image
-	installed_image_path="boot/vmlinuz-$version"
-
-	;;
-arm*)
-	image_name=zImage
-	installed_image_path="boot/vmlinuz-$version"
-	;;
 um)
 	installed_image_path="usr/bin/linux-$version"
 	;;
@@ -180,10 +91,10 @@ BUILD_DEBUG=$(if_enabled_echo CONFIG_DEBUG_INFO Yes)
 
 # Setup the directory structure
 rm -rf "$tmpdir" "$kernel_headers_dir" "$libc_headers_dir" "$dbg_dir" "$dtb_dir" $objtree/debian/files
-mkdir -m 755 -p "$dtb_dir/DEBIAN"
-mkdir -p "$dtb_dir/boot/dtb-$version" "$dtb_dir/usr/share/doc/$dtb_packagename"
 mkdir -m 755 -p "$tmpdir/DEBIAN"
 mkdir -p "$tmpdir/lib" "$tmpdir/boot"
+mkdir -m 755 -p "$dtb_dir/DEBIAN"
+mkdir -p "$dtb_dir/boot/dtb-$version" "$dtb_dir/usr/share/doc/$dtb_packagename"
 mkdir -p "$kernel_headers_dir/lib/modules/$version/"
 
 # Build and install the kernel
@@ -206,6 +117,14 @@ if is_enabled CONFIG_OF_EARLY_FLATTREE; then
 	fi
 fi
 
+if grep -q '^CONFIG_OF=y' $KCONFIG_CONFIG; then
+	INSTALL_DTBS_PATH="$dtb_dir/boot/dtb-$version" $MAKE KBUILD_SRC= dtbs_install
+	mkdir -p "$dtb_dir/boot/firmware/overlays"
+	find "$dtb_dir/boot/dtb-$version" -path "$dtb_dir/boot/firmware" -prune -o -name '*.dtb' -exec cp {} "$dtb_dir/boot/firmware" \;
+	find "$dtb_dir/boot/dtb-$version" -path "$dtb_dir/boot/firmware" -prune -o -name '*.dtbo' -exec cp {} "$dtb_dir/boot/firmware/overlays" \;
+	rm -rf "$dtb_dir/boot/dtb-$version"
+fi
+
 if is_enabled CONFIG_MODULES; then
 	INSTALL_MOD_PATH="$tmpdir" $MAKE -f $srctree/Makefile modules_install
 	rm -f "$tmpdir/lib/modules/$version/build"
@@ -233,11 +152,6 @@ if is_enabled CONFIG_MODULES; then
 	fi
 fi
 
-if grep -q '^CONFIG_OF=y' $KCONFIG_CONFIG ; then
-	#mkdir -p "$tmpdir/boot/dtb"
-	INSTALL_DTBS_PATH="$dtb_dir/boot/dtb-$version" $MAKE KBUILD_SRC= dtbs_install
-fi
-
 if [ "$ARCH" != "um" ]; then
 	$MAKE -f $srctree/Makefile headers
 	$MAKE -f $srctree/Makefile headers_install INSTALL_HDR_PATH="$libc_headers_dir/usr"
@@ -257,7 +171,7 @@ debhookdir=${KDEB_HOOKDIR:-/etc/kernel}
 for script in postinst postrm preinst prerm ; do
 	mkdir -p "$tmpdir$debhookdir/$script.d"
 	cat <<EOF > "$tmpdir/DEBIAN/$script"
-#!/bin/bash
+#!/bin/sh
 
 set -e
 
@@ -273,53 +187,11 @@ EOF
 	chmod 755 "$tmpdir/DEBIAN/$script"
 done
 
-##
-## Create sym link to kernel image
-##
-sed -e "s/exit 0//g" -i $tmpdir/DEBIAN/postinst
-cat >> $tmpdir/DEBIAN/postinst <<EOT
-ln -sf $(basename $installed_image_path) /boot/$image_name 2> /dev/null || cp /$installed_image_path /boot/$image_name
-touch /boot/.next
-exit 0
-EOT
-
-##
-## FAT install workaround
-##
-sed -e "s/exit 0//g" -i $tmpdir/DEBIAN/preinst
-cat >> $tmpdir/DEBIAN/preinst <<EOT
-# exit if we are running chroot
-if [ "\$(stat -c %d:%i /)" != "\$(stat -c %d:%i /proc/1/root/.)" ]; then exit 0; fi
-
-check_and_unmount (){
-	boot_device=\$(mountpoint -d /boot)
-
-	for file in /dev/* ; do
-		CURRENT_DEVICE=\$(printf "%d:%d" \$(stat --printf="0x%t 0x%T" \$file))
-		if [[ "\$CURRENT_DEVICE" = "\$boot_device" ]]; then
-			boot_partition=\$file
-			break
-		fi
-	done
-
-	bootfstype=\$(blkid -s TYPE -o value \$boot_partition)
-	if [ "\$bootfstype" = "vfat" ]; then
-		# we have to keep it mounted! umount /boot
-		rm -f /boot/System.map* /boot/config* /boot/vmlinuz* /boot/$image_name /boot/uImage
-	fi
-}
-mountpoint -q /boot && check_and_unmount
-EOT
-echo "exit 0" >> $tmpdir/DEBIAN/preinst
-
 # Build kernel header package
 (cd $srctree; find . -name Makefile\* -o -name Kconfig\* -o -name \*.pl) > "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find arch/*/include include scripts -type f -o -type l) >> "$objtree/debian/hdrsrcfiles"
-(cd $srctree; find security/*/include -type f) >> "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find arch/$SRCARCH -name module.lds -o -name Kbuild.platforms -o -name Platform) >> "$objtree/debian/hdrsrcfiles"
 (cd $srctree; find $(find arch/$SRCARCH -name include -o -name scripts -type d) -type f) >> "$objtree/debian/hdrsrcfiles"
-ldstemp=$(mktemp);cp scripts/module.lds $ldstemp
-(cd $objtree; make M=scripts clean;)
 if is_enabled CONFIG_STACK_VALIDATION; then
 	(cd $objtree; find tools/objtool -type f -executable) >> "$objtree/debian/hdrobjfiles"
 fi
@@ -329,17 +201,21 @@ if is_enabled CONFIG_GCC_PLUGINS; then
 fi
 destdir=$kernel_headers_dir/usr/src/linux-headers-$version
 mkdir -p "$destdir"
-(cd $destdir; patch -p1 < /tmp/headers-debian-byteshift.patch)
 (cd $srctree; tar -c -f - -T -) < "$objtree/debian/hdrsrcfiles" | (cd $destdir; tar -xf -)
 (cd $objtree; tar -c -f - -T -) < "$objtree/debian/hdrobjfiles" | (cd $destdir; tar -xf -)
 (cd $objtree; cp $KCONFIG_CONFIG $destdir/.config) # copy .config manually to be where it's expected to be
-mv ${ldstemp} $destdir/scripts/module.lds
 ln -sf "/usr/src/linux-headers-$version" "$kernel_headers_dir/lib/modules/$version/build"
 rm -f "$objtree/debian/hdrsrcfiles" "$objtree/debian/hdrobjfiles"
 
 if [ "$ARCH" != "um" ]; then
-	create_package "$kernel_headers_packagename" "$kernel_headers_dir" "headers"
-	create_package "$dtb_packagename" "$dtb_dir" "dtb"
+
+	if [ "$(cat debian/arch)" != "amd64" ]; then # No DTB for amd64 target
+		create_package "$dtb_packagename" "$dtb_dir" "dtb"
+	fi
+
+	create_package "$kernel_headers_packagename" "$kernel_headers_dir"
+	create_package "$libc_headers_packagename" "$libc_headers_dir"
+
 fi
 
 create_package "$packagename" "$tmpdir"
diff --git a/scripts/package/mkdebian b/scripts/package/mkdebian
index 7c6197efa1..5ed7c250f4 100755
--- a/scripts/package/mkdebian
+++ b/scripts/package/mkdebian
@@ -94,12 +94,11 @@ else
 	packageversion=$version-$revision
 fi
 sourcename=$KDEB_SOURCENAME
-packagename=linux-image-$BRANCH$LOCALVERSION
-kernel_headers_packagename=linux-headers-$BRANCH$LOCALVERSION
-dtb_packagename=linux-dtb-$BRANCH$LOCALVERSION
+packagename=linux-image-$version
+kernel_headers_packagename=linux-headers-$version
+dtb_packagename=linux-dtb-$version
 dbg_packagename=$packagename-dbg
 debarch=
-image_name=
 set_debarch
 
 if [ "$ARCH" = "um" ] ; then
@@ -177,7 +176,7 @@ Section: kernel
 Priority: optional
 Maintainer: $maintainer
 Build-Depends: bc, rsync, kmod, cpio, bison, flex | flex:native $extra_build_depends
-Homepage: https://www.kernel.org/
+Homepage: http://www.kernel.org/
 
 Package: $packagename
 Architecture: $debarch
@@ -185,14 +184,8 @@ Description: Linux kernel, version $version
  This package contains the Linux kernel, modules and corresponding other
  files, version: $version.
 
-Package: $dtb_packagename
-Architecture: $debarch
-Description: Linux DTB, version $version
- This package contains device blobs from the Linux kernel, version $version
-
 Package: $kernel_headers_packagename
 Architecture: $debarch
-Depends: make, gcc, libc6-dev, bison, flex, libssl-dev
 Description: Linux kernel headers for $version on $debarch
  This package provides kernel header files for $version on $debarch
  .
@@ -206,10 +199,6 @@ Description: Linux support headers for userspace development
  This package provides userspaces headers from the Linux kernel.  These headers
  are used by the installed headers for GNU glibc and other system libraries.
 Multi-Arch: same
-EOF
-
-if is_enabled CONFIG_DEBUG_INFO; then
-cat <<EOF >> debian/control
 
 Package: $dbg_packagename
 Section: debug
@@ -217,8 +206,13 @@ Architecture: $debarch
 Description: Linux kernel debugging symbols for $version
  This package will come in handy if you need to debug the kernel. It provides
  all the necessary debug symbols for the kernel and its modules.
+
+Package: $dtb_packagename
+Architecture: $debarch
+Provides: linux-dtb
+Description: Linux DTB, version $version
+ This package contains device blobs from the Linux kernel, version $version
 EOF
-fi
 
 cat <<EOF > debian/rules
 #!$(command -v $MAKE) -f
-- 
2.25.1

